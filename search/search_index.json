{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"About Me","title":"About"},{"location":"about/#about-me","text":"","title":"About Me"},{"location":"array/intro/","text":"Introduction of Array Continuous memory allocation Advantages Random Access Cache friendliness","title":"Introduction"},{"location":"array/intro/#introduction-of-array","text":"Continuous memory allocation Advantages Random Access Cache friendliness","title":"Introduction of Array"},{"location":"array/largest_element/","text":"Largest element in array package main import \"fmt\" func main() { arr := []int{10, 52, 18, 20} largest := getLargest(arr) fmt.Println(\"largest element at index\", largest) fmt.Println(\"largest element\", arr[largest]) } func getLargest(arr []int) int { largest := 0 for i := 1; i < len(arr); i++ { if arr[i] > arr[largest] { largest = i } } return largest } Time Complexity: O(n)","title":"Largest Element in Array"},{"location":"array/largest_element/#largest-element-in-array","text":"package main import \"fmt\" func main() { arr := []int{10, 52, 18, 20} largest := getLargest(arr) fmt.Println(\"largest element at index\", largest) fmt.Println(\"largest element\", arr[largest]) } func getLargest(arr []int) int { largest := 0 for i := 1; i < len(arr); i++ { if arr[i] > arr[largest] { largest = i } } return largest } Time Complexity: O(n)","title":"Largest element in array"},{"location":"array/operations/","text":"Operations Search (unsorted array) package main import \"fmt\" func main() { arr := []int{10, 3, 6, 14, 17} result := search(arr, 14) if result == -1 { fmt.Println(\"Element not found\") } else { fmt.Println(\"Element found at index:\", result) } } func search(arr []int, ele int) int { for i := 0; i < len(arr); i++ { if arr[i] == ele { return i } } return -1 } Time Complexity: O(n)","title":"Operation in Array"},{"location":"array/operations/#operations","text":"","title":"Operations"},{"location":"array/operations/#search-unsorted-array","text":"package main import \"fmt\" func main() { arr := []int{10, 3, 6, 14, 17} result := search(arr, 14) if result == -1 { fmt.Println(\"Element not found\") } else { fmt.Println(\"Element found at index:\", result) } } func search(arr []int, ele int) int { for i := 0; i < len(arr); i++ { if arr[i] == ele { return i } } return -1 } Time Complexity: O(n)","title":"Search (unsorted array)"}]}